# -- coding utf-8 --

Created on Sun Sep 20 164225 2020

@author USER




import numpy as np
import pandas as pd


### problem PARAMETERS #######
inter_arrival_max = 5
inter_arrival_min = 3

service_time_max = 5
service_time_min = 2

n_events = 30
#################################

################################

np.random.seed(42)
event = 0

#at event zero time is also zero
time_ = 0
#create counters for arrived and served customers
arrived_customers = 0
served_customers = 0
departed_customers = 0

############################################
#generate random variables for next events
rand_numb_interarrival = np.random.rand()
interarrival_time = inter_arrival_min + (inter_arrival_max - inter_arrival_min) rand_numb_interarrival
next_arrival_time = time_ + interarrival_time
next_event_time = time_ + next_arrival_time
server_status = idle
queue = 0
arrived_customers += 1

#########################3 event zero done

#initialize timeseries df and populate with next event details
ts_columns = ['event', 'time', 'type', 
              'queue', 'arr cust', 'served cust', 'depar cust']

time_series =  pd.DataFrame([[1, float(next_event_time), arrival, 
                              queue, arrived_customers, 0, 0]],
                             columns = ts_columns) 
event += 1  

#loop through events and generate next events
#compute events generated by event in existing DF
while event = n_events 

  #event starts  
  #parameters at event t
  event_type = time_series['type'].iloc[event-1]
  time_ = time_series['time'].iloc[event-1]

     
  if event_type == arrival
    
    ## arrival event generate by default next arrival time
              #event_customer += 1  #to delete
    arrived_customers += 1
                #arrival_time = time_ 
    rand_numb_interarrival =  np.random.rand()
    interarrival_time = inter_arrival_min + (inter_arrival_max - inter_arrival_min) rand_numb_interarrival
    next_arrival_time = time_ + interarrival_time  
    
  
      #
      
        #if server status is idle generates arrival and service activity
    if server_status == idle
      
      #determine if arriving customer at time t will be served
      served_customers += 1
      time_series['served cust'].iloc[event-1] =  served_customers
      
      
      #generate next events (service and departure time)
  

      departed_customers += 1 #same customer that is served at arrival time departs are departure time
      
      rand_numb_service = np.random.rand()
      service_time  = service_time_min + (service_time_max - service_time_min) rand_numb_service
      departure_time = time_ + service_time
      
      generated_events =  pd.DataFrame([
                      [99, float(departure_time), departure, 0, 0,0,  departed_customers],
                      [99, float(next_arrival_time), arrival, 0, arrived_customers, 0, 0]
                      ], columns = ts_columns) 
                      #Order doesnt matter because it's sorted next
                      
      
      #add next event and time to series
      time_series =  pd.concat([time_series, generated_events])
      time_series = time_series.sort_values(['time'])
      time_series.reset_index(drop=True, inplace=True)
      time_series['event'] = list(range(1, time_series.shape[0]+1))
      

      event += 1 
      #print(generated_events)
  
  
      
      
      
      #if server status is busy increase queue and only generates arrival activity
    if server_status == busy
      
      queue += 1
      
      generated_events =  pd.DataFrame([
                            [99, float(next_arrival_time), arrival, 
                             0, arrived_customers,0, 0]]
                            , columns = ts_columns) 

      
      time_series =  pd.concat([time_series, generated_events])
      time_series = time_series.sort_values(['time'])
      time_series.reset_index(drop=True, inplace=True)
      time_series['event'] = list(range(1, time_series.shape[0]+1))
      time_series['queue'].iloc[event-1] = queue
      event += 1 
    
    
  
  if event_type == departure
 
    server_status = idle #status after event, if queue  0 inmediatly changes to busy and queue decreases by 1
    
    #if queue is zero and customer depart, server status remains idle and next event is an arrival
    if queue == 0 
        
      
      server_status = idle
      event += 1
      #nothing else happens untill next arrival (go to next itteration)
      
    if queue != 0 
      
     #determine if  customer in quueu at time t will be served
      served_customers += 1
      time_series['served cust'].iloc[event-1] =  served_customers
      
      #if queue is  0, server status changes to busy and next customer is served
      queue -= 1
      server_status = busy
      #since a new customer is being serve, generate service time
      departed_customers += 1
      rand_numb_service =  np.random.rand()
      
      service_time  = service_time_min + (service_time_max - service_time_min) rand_numb_service
      departure_time = time_ + service_time
      
      generated_events =  pd.DataFrame([
                                [99, float(departure_time), departure, 0, 0, 0, departed_customers]
                                ], columns = ts_columns) 
    
      time_series =  pd.concat([time_series, generated_events])
      time_series = time_series.sort_values(['time'])
      time_series.reset_index(drop=True, inplace=True)
      time_series['event'] = list(range(1, time_series.shape[0]+1)) 
      time_series['queue'].iloc[event-1] = queue

      event += 1 
      
      #print(generated_events)
  
  if next_arrival_time  departure_time
      server_status = busy #becomes busy
  else 
      server_status = idle
      

#end of loop
  
#create sumary of customer data with results
  
arrivals = time_series.loc[time_series['type'] == 'arrival', ['time', 'arr cust' ]]
arrivals.columns = ['time', 'customer']
depature = time_series.loc[time_series['type'] == 'departure', ['time', 'depar cust' ]]
depature.columns = ['time', 'customer']

serving = time_series.loc[time_series['served cust'] != 0 , ['time', 'served cust' ]]
serving.columns = ['time', 'customer']



customer_df = arrivals.merge(depature, on='customer')
customer_df = customer_df.merge(serving, on='customer')
customer_df.columns = ['arrival time', 'customer', 'departure time', 'serving time']
customer_df = customer_df[['customer', 'arrival time', 'serving time', 'departure time']] 

#get time in queue
customer_df['time in queue'] = customer_df['serving time'] - customer_df['arrival time'] 

#get time in system
customer_df['time in system'] = customer_df['departure time'] - customer_df['arrival time'] 

#get time in server
customer_df['time in server'] = customer_df['departure time'] - customer_df['serving time'] 